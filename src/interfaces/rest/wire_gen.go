// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package rest

import (
	"github.com/google/wire"
	"github.com/hendrorahmat/golang-clean-architecture/src/applications/usecases"
	"github.com/hendrorahmat/golang-clean-architecture/src/interfaces/rest/routes/oauth2/handler"
	"github.com/sirupsen/logrus"
)

// Injectors from provider.go:

func InjectHandler(usecases2 *usecases.Usecase, logger *logrus.Logger, defaultJoins ...string) *Handler {
	oauthClientHandler := ProvideOauthClientHandler(usecases2, logger)
	oauthTokenHandler := ProvideOauthTokenHandler(usecases2, logger)
	oauth2Handler := oauth2_handler.Oauth2Handler{
		OauthClientHandler: oauthClientHandler,
		OauthTokenHandler:  oauthTokenHandler,
	}
	handler := &Handler{
		Oauth2Handler: oauth2Handler,
	}
	return handler
}

// provider.go:

func ProvideOauthClientHandler(u *usecases.Usecase, logger *logrus.Logger) *oauth2_handler.OauthClientHandler {
	return &oauth2_handler.OauthClientHandler{
		Usecase: u.OauthUsecase,
		Logger:  logger,
	}
}

func ProvideOauthTokenHandler(u *usecases.Usecase, logger *logrus.Logger) *oauth2_handler.OauthTokenHandler {
	return &oauth2_handler.OauthTokenHandler{
		Usecase: u.OauthUsecase,
		Logger:  logger,
	}
}

var (
	ProviderHandlerSet wire.ProviderSet = wire.NewSet(
		ProvideOauthClientHandler,
		ProvideOauthTokenHandler, wire.Struct(new(Handler), "*"), wire.Struct(new(oauth2_handler.Oauth2Handler), "*"), wire.Bind(new(oauth2_handler.IOauthClientHandler), new(*oauth2_handler.OauthClientHandler)), wire.Bind(new(oauth2_handler.IOauthTokenHandler), new(*oauth2_handler.OauthTokenHandler)),
	)
)
