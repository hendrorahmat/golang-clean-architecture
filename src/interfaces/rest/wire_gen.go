// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package rest

import (
	"github.com/google/wire"
	"github.com/hendrorahmat/golang-clean-architecture/src/applications"
	"github.com/hendrorahmat/golang-clean-architecture/src/applications/usecases"
	"github.com/hendrorahmat/golang-clean-architecture/src/infrastructures/databases"
	"github.com/hendrorahmat/golang-clean-architecture/src/infrastructures/databases/postgres/repositories"
	"github.com/hendrorahmat/golang-clean-architecture/src/interfaces/rest/routes/v1/simkah_app/handler"
	"github.com/sirupsen/logrus"
	"gorm.io/gorm"
)

// Injectors from provider.go:

func InjectHandler(db *gorm.DB, logger *logrus.Logger, defaultJoins ...string) *Handler {
	gormRepository := databases.ProvideDatabaseRepository(db, logger, defaultJoins...)
	gormBankRepository := &repositories_postgres.GormBankRepository{
		TransactionRepository: gormRepository,
	}
	bankUsecase := &usecases.BankUsecase{
		Repository: gormBankRepository,
	}
	bankHandler := &handler.BankHandler{
		Usecase: bankUsecase,
		Logger:  logger,
	}
	restHandler := &Handler{
		BankHandler: bankHandler,
	}
	return restHandler
}

// provider.go:

var BankHandlerSet = wire.NewSet(wire.Struct(new(handler.BankHandler), "*"))

var (
	ProviderHandlerSet wire.ProviderSet = wire.NewSet(
		BankHandlerSet, applications.ProviderUsecaseSet, wire.Struct(new(Handler), "*"), wire.Bind(new(handler.IBankHandler), new(*handler.BankHandler)),
	)
)
