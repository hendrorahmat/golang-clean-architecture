// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package applications

import (
	"github.com/google/wire"
	"github.com/hendrorahmat/golang-clean-architecture/src/applications/usecases"
	"github.com/hendrorahmat/golang-clean-architecture/src/infrastructure/persistance/database"
	"github.com/sirupsen/logrus"
)

// Injectors from provider.go:

func InjectUsecase(repository *database.Repository, logger *logrus.Logger, defaultJoins ...string) *usecases.Usecase {
	oauthUsecase := ProvideOauthUsecase(repository, logger)
	usecase := &usecases.Usecase{
		OauthUsecase: oauthUsecase,
	}
	return usecase
}

// provider.go:

func ProvideOauthUsecase(repository *database.Repository, logger *logrus.Logger) *usecases.OauthUsecase {
	return &usecases.OauthUsecase{
		OauthClientRepository:      repository.OauthClientRepository,
		OauthAccessTokenRepository: repository.OauthAccessTokenRepository,
		Logger:                     logger,
	}
}

var (
	ProviderUsecaseSet wire.ProviderSet = wire.NewSet(
		ProvideOauthUsecase, wire.Struct(new(usecases.Usecase), "*"), wire.Bind(new(usecases.IOauthUsecase), new(*usecases.OauthUsecase)),
	)
)
