// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package database

import (
	"github.com/google/wire"
	repositories2 "github.com/hendrorahmat/golang-clean-architecture/src/domain/repositories"
	"github.com/hendrorahmat/golang-clean-architecture/src/infrastructure/persistance/database/postgres/repositories"
	"github.com/sirupsen/logrus"
	"gorm.io/gorm"
)

// Injectors from provider.go:

func InjectRepository(db *gorm.DB, logger *logrus.Logger, defaultJoins ...string) *Repository {
	databaseGormRepository := ProvideDatabaseGorm(db, logger, defaultJoins...)
	postgresBankRepository := &repositories.PostgresBankRepository{
		ITransactionRepository: databaseGormRepository,
	}
	postgresOauthClientRepository := &repositories.OauthClientRepository{
		ITransactionRepository: databaseGormRepository,
	}
	postgresOauthAccessTokenRepository := &repositories.OauthAccessTokenRepository{
		ITransactionRepository: databaseGormRepository,
	}
	repository := &Repository{
		TransactionRepository:      databaseGormRepository,
		BaseRepository:             databaseGormRepository,
		BankRepository:             postgresBankRepository,
		OauthClientRepository:      postgresOauthClientRepository,
		OauthAccessTokenRepository: postgresOauthAccessTokenRepository,
	}
	return repository
}

// provider.go:

type Repository struct {
	TransactionRepository      repositories2.ITransactionRepository
	BaseRepository             repositories2.IRepository
	BankRepository             repositories2.IBankRepository
	OauthClientRepository      repositories2.IOauthClientRepository
	OauthAccessTokenRepository repositories2.IOauthAccessTokenRepository
}

func ProvideDatabaseGorm(db *gorm.DB, logger *logrus.Logger, defaultJoins ...string) *gormRepository {
	return &gormRepository{
		defaultJoins: defaultJoins,
		logger:       logger,
		db:           db,
	}
}

// var GormBankRepositoryPostgresSet = wire.NewSet(new(*repositories2.PostgresBankRepository))
var GormBankRepositorySet = wire.NewSet(wire.Struct(new(repositories.PostgresBankRepository), "*"))

var GormOauthClientRepositorySet = wire.NewSet(wire.Struct(new(repositories.OauthClientRepository), "*"))

var GormOauthAccessTokenRepositorySet = wire.NewSet(wire.Struct(new(repositories.OauthAccessTokenRepository), "*"))

var (
	ProviderRepositorySet wire.ProviderSet = wire.NewSet(
		ProvideDatabaseGorm,

		GormBankRepositorySet,
		GormOauthClientRepositorySet,
		GormOauthAccessTokenRepositorySet, wire.Struct(new(Repository), "*"), wire.Bind(new(repositories2.ITransactionRepository), new(*gormRepository)), wire.Bind(new(repositories2.IRepository), new(*gormRepository)), wire.Bind(new(repositories2.IBankRepository), new(*repositories.PostgresBankRepository)), wire.Bind(new(repositories2.IOauthClientRepository), new(*repositories.OauthClientRepository)), wire.Bind(new(repositories2.IOauthAccessTokenRepository), new(*repositories.OauthAccessTokenRepository)),
	)
)
