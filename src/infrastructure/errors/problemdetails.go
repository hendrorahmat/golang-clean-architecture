package errors

import (
	"encoding/xml"
	domain_errors "github.com/hendrorahmat/golang-clean-architecture/src/domain/errors"
)

type ProblemDetails struct {
	XMLName xml.Name `json:"-" xml:"urn:ietf:rfc:7807 problem"`
	// Type is a URI reference [RFC3986] that identifies the
	// problem type. This specification encourages that, when
	// dereferenced, it provide human-readable documentation for the
	// problem type (e.g., using HTML [W3C.REC-html5-20141028]).  When
	// this member is not present, its value is assumed to be
	// "about:blank".
	Type string `json:"type" xml:"type"`
	// Title is a short, human-readable summary of the problem
	// type.  It SHOULD NOT change from occurrence to occurrence of the
	// problem, except for purposes of localization (e.g., using
	// proactive content negotiation; see [RFC7231], Section 3.4).
	Title string `json:"title" xml:"title"`
	// Status is the HTTP status code ([RFC7231], Section 6)
	// generated by the origin server for this occurrence of the problem.
	Status int `json:"status,omitempty" xml:"status,omitempty"`
	// Detail is a human-readable explanation specific to this
	// occurrence of the problem.
	// If present, it ought to focus on helping the client
	// correct the problem, rather than giving debugging information.
	Detail string `json:"detail,omitempty" xml:"detail,omitempty"`
	// Instance is a URI reference that identifies the specific
	// occurrence of the problem.  It may or may not yield further
	// information if dereferenced.
	Instance string `json:"instance,omitempty" xml:"instance,omitempty"`

	InvalidParams ValidationErrors `json:"invalid_params,omitempty" xml:"invalid_params,omitempty"`
	Code          uint             `json:"code"`
}

func NewProblemDetails(statusCode int, commonError any, problemType, instance string) *ProblemDetails {
	if problemType == "" {
		problemType = "about:blank"
	}

	switch errorType := commonError.(type) {
	case *ValidationError:
		return &ProblemDetails{
			Type:          problemType,
			Title:         errorType.Message,
			Status:        statusCode,
			Instance:      instance,
			InvalidParams: errorType.ValidationErrors,
			Code:          errorType.ErrorCode,
		}
	case domain_errors.DomainError:
		return &ProblemDetails{
			Type:          problemType,
			Title:         errorType.GetTitle(),
			Status:        statusCode,
			Detail:        errorType.Error(),
			Instance:      instance,
			InvalidParams: nil,
			Code:          errorType.GetCode(),
		}
	default:
		panic("Error type not found!")
	}
}
